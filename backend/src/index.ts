import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { config } from './config';
import routes from './routes';
import { errorHandler, notFoundHandler } from './middleware/errorHandler';
import { ReminderService } from './services/reminderService';
import * as cron from 'node-cron';

const app = express();

// Trust proxy for Render
app.set('trust proxy', 1);

// Middleware –¥–ª—è –±–µ–∑–ø–µ–∫–∏
app.use(helmet());

// CORS
app.use(cors({
  origin: [
    'https://deadline-tracker-sand.vercel.app',
    'https://deadline-tracker.vercel.app',
    'http://localhost:5173',
    config.frontend.url
  ],
  credentials: true,
}));

// Rate limiting - –∑–º–µ–Ω—à–µ–Ω–æ –¥–ª—è Render
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
  max: 50, // –∑–º–µ–Ω—à–µ–Ω–æ –¥–æ 50 –∑–∞–ø–∏—Ç—ñ–≤
  message: '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑ —Ü—å–æ–≥–æ IP, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ',
});
app.use('/api/', limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
app.use('/uploads', express.static(config.upload.dir));

// API –º–∞—Ä—à—Ä—É—Ç–∏
app.use('/api', routes);

// Test route
app.get('/test', (req, res) => {
  res.json({ message: 'Backend is working!', timestamp: new Date().toISOString() });
});

// Health check –¥–ª—è Render
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'OK', timestamp: new Date().toISOString() });
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
app.use(notFoundHandler);
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = config.port;

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Frontend URL: ${config.frontend.url}`);
  console.log(`üåç Environment: ${config.nodeEnv}`);
});

// –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å - –í–ò–ú–ö–ù–ï–ù–û
// cron.schedule('* * * * *', async () => {
//   try {
//     await ReminderService.processReminders();
//   } catch (error) {
//     console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:', error);
//   }
// });

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('SIGTERM –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

export default app;
