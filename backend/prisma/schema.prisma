// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  PROJECT_LEAD
  ADMIN
  SUPER_ADMIN
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ReminderType {
  PUSH
  EMAIL
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      UserRole @default(STUDENT)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdTasks     Task[]      @relation("TaskCreator")
  assignedTasks    Task[]      @relation("TaskAssignee")
  createdProjects  Project[]   @relation("ProjectCreator")
  projectMembers   ProjectMember[]
  comments         Comment[]
  attachments      Attachment[]
  reminders        Reminder[]
  notifications    Notification[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  creatorId   String

  // Relations
  creator     User            @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("member") // member, lead, admin
  joinedAt  DateTime @default(now())

  // Relations
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  deadline    DateTime
  status      TaskStatus   @default(NOT_STARTED)
  priority    TaskPriority @default(MEDIUM)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String
  assigneeId  String?
  projectId   String?
  parentTaskId String?

  // Relations
  creator     User         @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  assignee    User?        @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  parentTask  Task?        @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks    Task[]       @relation("SubTasks")
  comments    Comment[]
  attachments Attachment[]
  reminders   Reminder[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  path      String
  createdAt DateTime @default(now())
  taskId    String
  userId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Reminder {
  id        String       @id @default(cuid())
  taskId    String
  userId    String
  remindAt  DateTime
  type      ReminderType @default(PUSH)
  isSent    Boolean      @default(false)
  createdAt DateTime     @default(now())

  // Relations
  task      Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("info") // info, warning, success, error
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
